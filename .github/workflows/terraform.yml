name: "Terraform Workflow"

on:
  workflow_call:
    inputs:
      aws-assume-role-arn:
        type: string
        required: true
      aws-region:
        type: string
        required: true

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.aws-assume-role-arn }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ inputs.aws-region }}

      - name: Terraform Init
        run: |
          cd terraform && terraform init

      - name: Terraform Validate
        run: cd terraform && terraform validate

      - name: Terraform Plan
        id: terraform-plan
        run: |
          cd terraform && terraform plan -out="plan.out"

      - name: Terraform Apply
        id: terraform-apply
        run: |
          cd terraform && terraform apply "plan.out"

      - name: Deploy to ECS
        run: |
          # Obter ARNs atuais da task definition
          TASK_DEF=$(aws ecs describe-task-definition --task-definition demo-teste)
          EXECUTION_ROLE_ARN=$(echo $TASK_DEF | jq -r '.taskDefinition.executionRoleArn')
          TASK_ROLE_ARN=$(echo $TASK_DEF | jq -r '.taskDefinition.taskRoleArn')
          
          # Criar nova task definition
          cat > task-definition.json << EOF
          {
              "family": "demo-teste",
              "networkMode": "awsvpc",
              "requiresCompatibilities": ["EC2"],
              "cpu": "256",
              "memory": "256",
              "executionRoleArn": "$EXECUTION_ROLE_ARN",
              "taskRoleArn": "$TASK_ROLE_ARN",
              "containerDefinitions": [
                  {
                      "name": "app",
                      "image": "03021914/blue-green:v2",
                      "essential": true,
                      "portMappings": [
                          {
                              "containerPort": 5000,
                              "hostPort": 5000,
                              "protocol": "tcp"
                          }
                      ],
                      "environment": [
                          {
                              "name": "EXAMPLE",
                              "value": "example"
                          }
                      ],
                      "logConfiguration": {
                          "logDriver": "awslogs",
                          "options": {
                              "awslogs-group": "/ecs/demo",
                              "awslogs-region": "${{ inputs.aws-region }}",
                              "awslogs-stream-prefix": "app"
                          }
                      }
                  }
              ]
          }
          EOF

          # Criar appspec.yaml
          cat > appspec.yaml << EOF
          version: 0.0
          Resources:
            - TargetService:
                Type: AWS::ECS::Service
                Properties:
                  TaskDefinition: <TASK_DEFINITION>
                  LoadBalancerInfo:
                    ContainerName: "app"
                    ContainerPort: 5000
                  PlatformVersion: "LATEST"
          EOF

          # Registrar nova task definition
          NEW_TASK_DEF=$(aws ecs register-task-definition --cli-input-json file://task-definition.json)
          NEW_TASK_DEF_ARN=$(echo $NEW_TASK_DEF | jq -r '.taskDefinition.taskDefinitionArn')

          # Criar deployment
          aws deploy create-deployment \
            --application-name ecs-demo-app \
            --deployment-group-name ecs-deployment-group \
            --revision revisionType=AppSpecContent,appSpecContent="{content=$(cat appspec.yaml | sed "s|<TASK_DEFINITION>|$NEW_TASK_DEF_ARN|" | base64 -w 0)}" \
            --description "Deploy via GitHub Actions"

      - name: Always Destroy
        if: always() 
        run: |
          cd terraform && terraform destroy -auto-approve
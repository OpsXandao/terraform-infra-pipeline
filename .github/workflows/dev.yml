name: "Blue-Green Deployment"

on:
  push:
    branches:
      - dev

permissions:
  id-token: write
  contents: read

env:
  CLUSTER_NAME: dev-demo
  SERVICE_NAME: app
  TASK_DEFINITION_FILE: terraform/ecs/task_definition.tpl.json
  BLUE_LISTENER_PORT: 80
  TEST_LISTENER_PORT: 5001

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::058264525554:role/github-actions-OpsXandao-pipeline
          aws-region: us-east-1

      - name: Get current task definition
        id: get-taskdef
        run: |
          TASK_DEF=$(aws ecs describe-task-definition \
            --task-definition demo-teste \
            --query 'taskDefinition' \
            --output json)
          # Store full task definition
          echo "TASK_DEF=$TASK_DEF" >> $GITHUB_ENV
          # Get the current image separately
          CURRENT_IMAGE=$(echo $TASK_DEF | jq -r '.containerDefinitions[0].image')
          echo "CURRENT_IMAGE=$CURRENT_IMAGE" >> $GITHUB_ENV
          # Store the task definition ARN
          TASK_DEF_ARN=$(echo $TASK_DEF | jq -r '.taskDefinitionArn')
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Create green task definition
        id: green-taskdef
        run: |
          echo "Creating green task definition with image: $CURRENT_IMAGE"
          
          # Create new task definition for green deployment with current image
          jq --arg IMG "$CURRENT_IMAGE" '.containerDefinitions[0].image = $IMG' ${{ env.TASK_DEFINITION_FILE }} > green-task-def.json
          echo "GREEN_TASKDEF_FILE=green-task-def.json" >> $GITHUB_OUTPUT

      - name: Deploy green environment
        id: deploy-green
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.green-taskdef.outputs.GREEN_TASKDEF_FILE }}
          service: ${{ env.SERVICE_NAME }}
          cluster: ${{ env.CLUSTER_NAME }}
          wait-for-service-stability: true

      - name: Health check green deployment
        id: health-check
        run: |
          echo "Performing health check on green deployment..."
          # Wait for service to be ready
          sleep 30
          
          # Get the ALB DNS name
          ALB_DNS=$(aws elbv2 describe-load-balancers \
            --names demo-alb \
            --query 'LoadBalancers[0].DNSName' \
            --output text)
          
          # Check the health endpoint on test port
          HEALTH_CHECK_URL="http://$ALB_DNS:5001/"
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $HEALTH_CHECK_URL)
          
          if [ "$HTTP_STATUS" -eq 200 ]; then
            echo "Green deployment is healthy"
            echo "STATUS=success" >> $GITHUB_OUTPUT
          else
            echo "Green deployment is unhealthy (Status: $HTTP_STATUS)"
            echo "STATUS=failure" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Update blue environment
        if: steps.health-check.outputs.STATUS == 'success'
        run: |
          # Deploy new version to blue environment
          NEW_TASKDEF=$(aws ecs register-task-definition \
            --cli-input-json file://${{ env.TASK_DEFINITION_FILE }} \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          
          aws ecs update-service \
            --cluster ${{ env.CLUSTER_NAME }} \
            --service ${{ env.SERVICE_NAME }} \
            --task-definition $NEW_TASKDEF \
            --force-new-deployment

          # Wait for stability
          aws ecs wait services-stable \
            --cluster ${{ env.CLUSTER_NAME }} \
            --services ${{ env.SERVICE_NAME }}

      - name: Switch traffic to blue
        if: success()
        run: |
          echo "Switching traffic back to blue environment..."
          # Get the listener ARN
          LISTENER_ARN=$(aws elbv2 describe-listeners \
            --load-balancer-arn $(aws elbv2 describe-load-balancers \
              --names demo-alb \
              --query 'LoadBalancers[0].LoadBalancerArn' \
              --output text) \
            --query 'Listeners[?Port==`80`].ListenerArn' \
            --output text)
          
          # Get the blue target group ARN
          BLUE_TARGET_GROUP_ARN=$(aws elbv2 describe-target-groups \
            --names "main-*" \
            --query 'TargetGroups[0].TargetGroupArn' \
            --output text)
          
          # Update the listener
          aws elbv2 modify-listener \
            --listener-arn $LISTENER_ARN \
            --default-actions Type=forward,TargetGroupArn=$BLUE_TARGET_GROUP_ARN

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed, rolling back..."
          
          # Update service to use previous task definition
          aws ecs update-service \
            --cluster ${{ env.CLUSTER_NAME }} \
            --service ${{ env.SERVICE_NAME }} \
            --task-definition ${{ env.TASK_DEF_ARN }} \
            --force-new-deployment
          
          # Wait for stability
          aws ecs wait services-stable \
            --cluster ${{ env.CLUSTER_NAME }} \
            --services ${{ env.SERVICE_NAME }}
          
          echo "Rollback completed successfully"
name: "Blue/Green Deployment"

on:
  push:
    branches:
      - dev

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::058264525554:role/github-actions-OpsXandao-pipeline
          aws-region: us-east-1

      - name: Get current task definition
        id: taskdef
        run: |
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition show-colors --query 'taskDefinition' --output json)
          echo "::set-output name=taskdef::$TASK_DEFINITION"

      - name: Update ECS service with new image and green target group
        run: |
          # Register new task definition
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --family show-colors \
            --task-role-arn $(echo '${{ steps.taskdef.outputs.taskdef }}' | jq -r '.taskRoleArn') \
            --execution-role-arn $(echo '${{ steps.taskdef.outputs.taskdef }}' | jq -r '.executionRoleArn') \
            --network-mode bridge \
            --container-definitions '[{"name":"app","image":"03021914/blue-green:v2","essential":true,"portMappings":[{"containerPort":5000,"hostPort":0,"protocol":"tcp"}]}]' \
            --cpu "256" \
            --memory "256" \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)

          # Update the service
          aws ecs update-service \
            --cluster prd-demo \
            --service color-bg-prd \
            --task-definition $NEW_TASK_DEF_ARN \
            --force-new-deployment

      - name: Wait for service stability
        run: |
          aws ecs wait services-stable \
            --cluster prd-demo \
            --services color-bg-prd

      - name: Switch traffic to green target group
        if: success()
        run: |
          aws elbv2 modify-listener \
            --listener-arn arn:aws:elasticloadbalancing:us-east-1:058264525554:listener/app/demo-alb/0565fa1042ffff1f/80 \
            --default-actions Type=forward,TargetGroupArn=arn:aws:elasticloadbalancing:us-east-1:058264525554:targetgroup/green-2025010920200791910000000a/4b31ab2c9059ad36

      - name: Health check green environment
        run: |
          sleep 30  # Wait for the application to be ready
          response=$(curl -s -o /dev/null -w "%{http_code}" http://demo-alb-716411278.us-east-1.elb.amazonaws.com:5001)
          if [ "$response" != "200" ]; then
            echo "Health check failed!"
            exit 1
          fi

      - name: Switch traffic back to blue environment
        if: always()  # Execute even if previous step fails
        run: |
          aws elbv2 modify-listener \
            --listener-arn arn:aws:elasticloadbalancing:us-east-1:058264525554:listener/app/demo-alb/0565fa1042ffff1f/80 \
            --default-actions Type=forward,TargetGroupArn=arn:aws:elasticloadbalancing:us-east-1:058264525554:targetgroup/main-2025010920200900350000000d/0c80a6712889b599
name: Blue/Green Deployment

on:
  push:
    branches: [ dev ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  BLUE_IMAGE: 03021914/blue-green:v1
  GREEN_IMAGE: 03021914/blue-green:v1
  NEW_VERSION: 03021914/blue-green:v2
  CLUSTER_NAME: demo-cluster  # Nome do seu cluster ECS
  BLUE_TARGET_GROUP: arn:aws:elasticloadbalancing:us-east-1:058264525554:targetgroup/blue-target-group  # ARN do target group Blue
  GREEN_TARGET_GROUP: arn:aws:elasticloadbalancing:us-east-1:058264525554:targetgroup/green-target-group  # ARN do target group Green
  LISTENER_ARN: arn:aws:elasticloadbalancing:us-east-1:058264525554:listener/app/demo-alb  # ARN do Listener

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::058264525554:role/github-actions-OpsXandao-pipeline
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy Green Environment
        id: deploy-green
        run: |
          echo "Deploying Green Environment"
          aws ecs update-service --cluster ${{ env.CLUSTER_NAME }} --service green-service --force-new-deployment \
            --task-definition $(aws ecs register-task-definition \
              --family green-task \
              --container-definitions "[{\"name\":\"app\",\"image\":\"${{ env.BLUE_IMAGE }}\"}]" \
              --query 'taskDefinition.taskDefinitionArn' --output text)
          
          aws ecs wait services-stable --cluster ${{ env.CLUSTER_NAME }} --services green-service
          echo "green_deploy=success" >> $GITHUB_OUTPUT

      - name: Health Check Green
        id: health-green
        if: steps.deploy-green.outputs.green_deploy == 'success'
        run: |
          echo "Performing health check for Green environment"
          # Implement your health check logic here, e.g., curl to endpoints
          echo "health_check=success" >> $GITHUB_OUTPUT

      - name: Switch Traffic to Green
        if: steps.health-green.outputs.health_check == 'success'
        run: |
          echo "Switching traffic to Green"
          aws elbv2 modify-listener --listener-arn ${{ env.LISTENER_ARN }} \
            --default-actions Type=forward,TargetGroupArn=${{ env.GREEN_TARGET_GROUP }}

      - name: Update Blue to New Version
        id: update-blue
        if: steps.health-green.outputs.health_check == 'success'
        run: |
          echo "Updating Blue environment with new version"
          aws ecs update-service --cluster ${{ env.CLUSTER_NAME }} --service blue-service --force-new-deployment \
            --task-definition $(aws ecs register-task-definition \
              --family blue-task \
              --container-definitions "[{\"name\":\"app\",\"image\":\"${{ env.NEW_VERSION }}\"}]" \
              --query 'taskDefinition.taskDefinitionArn' --output text)
          
          aws ecs wait services-stable --cluster ${{ env.CLUSTER_NAME }} --services blue-service
          echo "blue_update=success" >> $GITHUB_OUTPUT

      - name: Health Check Blue
        id: health-blue
        if: steps.update-blue.outputs.blue_update == 'success'
        run: |
          echo "Performing health check for Blue environment"
          # Implement your health check logic here, e.g., curl to endpoints
          echo "health_check=success" >> $GITHUB_OUTPUT

      - name: Switch Traffic Back to Blue
        if: steps.health-blue.outputs.health_check == 'success'
        run: |
          echo "Switching traffic back to Blue"
          aws elbv2 modify-listener --listener-arn ${{ env.LISTENER_ARN }} \
            --default-actions Type=forward,TargetGroupArn=${{ env.BLUE_TARGET_GROUP }}

      - name: Rollback Blue on Failure
        if: steps.health-blue.outputs.health_check != 'success'
        run: |
          echo "Rollback Blue to previous version"
          aws ecs update-service --cluster ${{ env.CLUSTER_NAME }} --service blue-service --force-new-deployment \
            --task-definition $(aws ecs register-task-definition \
              --family blue-task \
              --container-definitions "[{\"name\":\"app\",\"image\":\"${{ env.BLUE_IMAGE }}\"}]" \
              --query 'taskDefinition.taskDefinitionArn' --output text)
          
          aws ecs wait services-stable --cluster ${{ env.CLUSTER_NAME }} --services blue-service
          aws elbv2 modify-listener --listener-arn ${{ env.LISTENER_ARN }} \
            --default-actions Type=forward,TargetGroupArn=${{ env.BLUE_TARGET_GROUP }}

      - name: Cleanup Green Environment
        if: always()
        run: |
          echo "Cleaning up Green Environment"
          aws ecs update-service --cluster ${{ env.CLUSTER_NAME }} --service green-service --desired-count 0

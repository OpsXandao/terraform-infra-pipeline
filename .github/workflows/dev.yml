name: "DEV DEPLOY"

on:
  push:
    branches:
      - dev

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::058264525554:role/github-actions-OpsXandao-pipeline
          aws-region: us-east-1

      - name: Define Variables
        id: vars
        run: |
          echo "IMAGE=03021914/blue-green:v2" >> $GITHUB_ENV

      - name: Get current target group
        id: target-group
        run: |
          PROD_LISTENER_ARN=$(aws elbv2 describe-listeners --load-balancer-arn $(aws elbv2 describe-load-balancers --names demo-alb --query 'LoadBalancers[0].LoadBalancerArn' --output text) --query 'Listeners[?Port==`5000`].ListenerArn' --output text)
          CURRENT_TARGET_GROUP=$(aws elbv2 describe-listeners --listener-arns $PROD_LISTENER_ARN --query 'Listeners[0].DefaultActions[0].ForwardConfig.TargetGroups[0].TargetGroupArn' --output text)
          
          if [[ $CURRENT_TARGET_GROUP == *"blue"* ]]; then
            echo "current=blue" >> $GITHUB_OUTPUT
            echo "target=green" >> $GITHUB_OUTPUT
          else
            echo "current=green" >> $GITHUB_OUTPUT
            echo "target=blue" >> $GITHUB_OUTPUT
          fi

      - name: Register new task definition
        id: register-task
        run: |
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition demo-teste --query 'taskDefinition' --output json)
          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "${{ env.IMAGE }}" '.containerDefinitions[0].image = $IMAGE' | jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)')
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEFINITION" --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "TASK_DEF_ARN=$NEW_TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Update ECS Service
        run: |
          aws ecs update-service \
            --cluster DevCluster \
            --service app \
            --task-definition ${{ env.TASK_DEF_ARN }} \
            --force-new-deployment
        

      - name: Wait for service stability
        run: |
          aws ecs wait services-stable \
            --cluster demo-cluster \
            --services app

      - name: Update test listener (5001)
        run: |
          TEST_LISTENER_ARN=$(aws elbv2 describe-listeners --load-balancer-arn $(aws elbv2 describe-load-balancers --names demo-alb --query 'LoadBalancers[0].LoadBalancerArn' --output text) --query 'Listeners[?Port==`5001`].ListenerArn' --output text)
          TARGET_GROUP_ARN=$(aws elbv2 describe-target-groups --names ${{ steps.target-group.outputs.target }} --query 'TargetGroups[0].TargetGroupArn' --output text)
          
          aws elbv2 modify-listener \
            --listener-arn $TEST_LISTENER_ARN \
            --default-actions Type=forward,TargetGroupArn=$TARGET_GROUP_ARN

      - name: Health check and switch production
        run: |
          sleep 60
          
          PROD_LISTENER_ARN=$(aws elbv2 describe-listeners --load-balancer-arn $(aws elbv2 describe-load-balancers --names demo-alb --query 'LoadBalancers[0].LoadBalancerArn' --output text) --query 'Listeners[?Port==`5000`].ListenerArn' --output text)
          TARGET_GROUP_ARN=$(aws elbv2 describe-target-groups --names ${{ steps.target-group.outputs.target }} --query 'TargetGroups[0].TargetGroupArn' --output text)
          
          aws elbv2 modify-listener \
            --listener-arn $PROD_LISTENER_ARN \
            --default-actions Type=forward,TargetGroupArn=$TARGET_GROUP_ARN

      - name: Rollback on failure
        if: failure()
        run: |
          aws ecs update-service \
            --cluster demo-cluster \
            --service app \
            --task-definition demo-teste \
            --force-new-deployment

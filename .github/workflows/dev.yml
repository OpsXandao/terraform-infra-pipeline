name: "Blue/Green Deployment"

on:
  push:
    branches:
      - dev

permissions:
  id-token: write
  contents: read

jobs:
  blue-green-deploy:
    runs-on: ubuntu-latest
    steps:
      # Checkout do repositório
      - uses: actions/checkout@v3

      # Configuração de credenciais AWS
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::058264525554:role/github-actions-OpsXandao-pipeline
          aws-region: us-east-1

      # Registrar task definition para o ambiente "verde"
      - name: Register Green Task Definition
        run: |
          sed 's/"family": "demo-teste"/"family": "demo-teste-green"/g' terraform/ecs/task_definition.tpl.json > green_task_definition.json
          aws ecs register-task-definition --cli-input-json file://green_task_definition.json

      # Atualizar serviço "verde"
      - name: Update Green Service
        run: |
          aws ecs update-service \
            --cluster demo-ecs-cluster \
            --service app-green \
            --task-definition demo-teste-green \
            --desired-count 1

      # Testar ambiente "verde"
      - name: Test Green Environment
        run: echo "Run your integration tests here"

      # Defina os valores corretos para os ARN dos target groups
      - name: Set Target Group ARNs
        run: |
          export GREEN_TARGET_GROUP_ARN="arn:aws:elbv2:us-east-1:058264525554:targetgroup/green-target-group"
          export BLUE_TARGET_GROUP_ARN="arn:aws:elbv2:us-east-1:058264525554:targetgroup/blue-target-group"

      # Redirecionar tráfego para o ambiente "verde" (target group verde)
      - name: Redirect Traffic to Green
        run: |
          aws elbv2 modify-target-group-attributes \
            --target-group-arn $GREEN_TARGET_GROUP_ARN \
            --attributes Key=stickiness.enabled,Value=false
          aws elbv2 modify-target-group-attributes \
            --target-group-arn $BLUE_TARGET_GROUP_ARN \
            --attributes Key=stickiness.enabled,Value=false

          # Atualizar as regras de listener do ALB para redirecionar o tráfego para o grupo de destino verde
          aws elbv2 modify-listener \
            --listener-arn arn:aws:alb:us-east-1:058264525554:listener/app/my-alb/1234567890abcdef \
            --default-actions Type=forward,TargetGroupArn=$GREEN_TARGET_GROUP_ARN

      # Deploy nova versão no ambiente "azul"
      - name: Deploy Blue Environment with New Version
        run: |
          sed 's/"family": "demo-teste"/"family": "demo-teste-blue"/g; s/v1/v2/g' terraform/ecs/task_definition.tpl.json > blue_task_definition.json
          aws ecs register-task-definition --cli-input-json file://blue_task_definition.json
          aws ecs update-service \
            --cluster demo-ecs-cluster \
            --service app-blue \
            --task-definition demo-teste-blue \
            --desired-count 1

      # Testar ambiente "azul"
      - name: Test Blue Environment
        run: echo "Run your integration tests here for the Blue environment"

      # Redirecionar tráfego de volta ao ambiente "azul" (target group azul)
      - name: Redirect Traffic to Blue
        run: |
          # Atualizar as regras de listener do ALB para redirecionar o tráfego para o grupo de destino azul
          aws elbv2 modify-listener \
            --listener-arn arn:aws:alb:us-east-1:058264525554:listener/app/my-alb/1234567890abcdef \
            --default-actions Type=forward,TargetGroupArn=$BLUE_TARGET_GROUP_ARN

      # Encerrar ambiente "verde" após o tráfego ser redirecionado para o azul
      - name: Scale Down Green Environment
        run: |
          aws ecs update-service \
            --cluster demo-ecs-cluster \
            --service app-green \
            --desired-count 0
          
      # Rollback se a versão azul falhar
      - name: Rollback if Blue Deployment Fails
        if: failure()
        run: |
          aws ecs update-service \
            --cluster demo-ecs-cluster \
            --service app-green \
            --desired-count 1
          aws ecs update-service \
            --cluster demo-ecs-cluster \
            --service app-blue \
            --desired-count 0

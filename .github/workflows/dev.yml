on:
  push:
    branches: [ dev ]
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag to deploy'
        required: true
        default: 'v2'

env:
  AWS_REGION: us-east-1
  CLUSTER_NAME: DevCluster
  BLUE_SERVICE_NAME: app-blue
  GREEN_SERVICE_NAME: app-green
  TASK_FAMILY: demo-teste
  ALB_NAME: demo-alb
  BLUE_IMAGE_TAG: v1
  NEW_IMAGE_TAG: v2
  TEST_PORT: 5001

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Blue-Green Deployment
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::058264525554:role/github-actions-OpsXandao-pipeline
        aws-region: us-east-1

    - name: Create Green Service if not exists
      run: |
        if ! aws ecs describe-services --cluster ${{ env.CLUSTER_NAME }} --services ${{ env.GREEN_SERVICE_NAME }} --query 'services[?status!=`INACTIVE`]' --output text | grep -q .; then
          aws ecs create-service \
            --cluster ${{ env.CLUSTER_NAME }} \
            --service-name ${{ env.GREEN_SERVICE_NAME }} \
            --task-definition ${{ env.TASK_FAMILY }} \
            --desired-count 2 \
            --deployment-configuration "maximumPercent=200,minimumHealthyPercent=100" \
            --load-balancers "targetGroupArn=arn:aws:elasticloadbalancing:${{ env.AWS_REGION }}:058264525554:targetgroup/green-*,containerName=app,containerPort=5000"
        fi

    - name: Register Green Task Definition (v1)
      id: register_green_task_definition
      run: |
        TASK_DEFINITION=$(aws ecs register-task-definition \
          --family ${{ env.TASK_FAMILY }} \
          --container-definitions '[{
            "name": "app",
            "image": "03021914/blue-green:${{ env.BLUE_IMAGE_TAG }}",
            "memory": 256,
            "cpu": 256,
            "essential": true,
            "portMappings": [{"containerPort": 5000, "hostPort": 5000}]
          }]' \
          --execution-role-arn "arn:aws:iam::058264525554:role/demo-ecs-exec-role" \
          --task-role-arn "arn:aws:iam::058264525554:role/demo-ecs-task-role")
        echo "green_task_definition=$(echo $TASK_DEFINITION | jq -r .taskDefinition.taskDefinitionArn)" >> $GITHUB_OUTPUT

    - name: Wait for Green Service to Stabilize
      run: |
        aws ecs wait services-stable \
          --cluster ${{ env.CLUSTER_NAME }} \
          --services ${{ env.GREEN_SERVICE_NAME }}

    - name: Redirect Traffic to Green
      run: |
        aws elbv2 modify-listener \
          --listener-arn arn:aws:elasticloadbalancing:${{ env.AWS_REGION }}:YOUR_ACCOUNT_ID:listener/app/${{ env.ALB_NAME }}/80 \
          --default-actions Type=forward,TargetGroupArn=arn:aws:elasticloadbalancing:${{ env.AWS_REGION }}:YOUR_ACCOUNT_ID:targetgroup/green/ID

    - name: Register Blue Task Definition (v2)
      id: register_blue_task_definition
      run: |
        TASK_DEFINITION=$(aws ecs register-task-definition \
          --family ${{ env.TASK_FAMILY }} \
          --container-definitions '[{
            "name": "app",
            "image": "03021914/blue-green:${{ github.event.inputs.image_tag }}",
            "memory": 256,
            "cpu": 256,
            "essential": true,
            "portMappings": [{"containerPort": 5000, "hostPort": 5000}]
          }]' \
          --execution-role-arn arn:aws:iam::YOUR_ACCOUNT_ID:role/demo-ecs-exec-role \
          --task-role-arn arn:aws:iam::YOUR_ACCOUNT_ID:role/demo-ecs-task-role)
        echo "::set-output name=blue_task_definition::$(echo $TASK_DEFINITION | jq -r .taskDefinition.taskDefinitionArn)"

    - name: Update Green Service
      run: |
        aws ecs update-service \
          --cluster ${{ env.CLUSTER_NAME }} \
          --service ${{ env.GREEN_SERVICE_NAME }} \
          --task-definition ${{ steps.register_green_task_definition.outputs.green_task_definition }} \
          --force-new-deployment

    - name: Update Blue Service to v2
      id: update_blue_service
      run: |
        aws ecs update-service \
          --cluster ${{ env.CLUSTER_NAME }} \
          --service ${{ env.BLUE_SERVICE_NAME }} \
          --task-definition ${{ steps.register_blue_task_definition.outputs.blue_task_definition }} \
          --force-new-deployment

    - name: Wait for Blue Service to Stabilize
      run: |
        aws ecs wait services-stable \
          --cluster ${{ env.CLUSTER_NAME }} \
          --services ${{ env.BLUE_SERVICE_NAME }}

    - name: Smoke Test on Blue
      id: smoke_test_blue
      run: |
        curl -s http://${{ env.ALB_NAME }}.amazonaws.com:5000 | grep "expected-output"

    - name: Redirect Traffic Back to Blue
      if: ${{ success() }}
      run: |
        aws elbv2 modify-listener \
          --listener-arn arn:aws:elasticloadbalancing:${{ env.AWS_REGION }}:YOUR_ACCOUNT_ID:listener/app/${{ env.ALB_NAME }}/80 \
          --default-actions Type=forward,TargetGroupArn=arn:aws:elasticloadbalancing:${{ env.AWS_REGION }}:YOUR_ACCOUNT_ID:targetgroup/blue/ID

    - name: Deregister and Stop Green Service
      if: ${{ success() }}
      run: |
        if aws ecs describe-services --cluster ${{ env.CLUSTER_NAME }} --services ${{ env.GREEN_SERVICE_NAME }} --query 'services[?status!=`INACTIVE`]' --output text | grep -q .; then
          aws ecs update-service \
            --cluster ${{ env.CLUSTER_NAME }} \
            --service ${{ env.GREEN_SERVICE_NAME }} \
            --desired-count 0
          aws ecs delete-service \
            --cluster ${{ env.CLUSTER_NAME }} \
            --service ${{ env.GREEN_SERVICE_NAME }} \
            --force
        fi

    - name: Rollback Blue to v1
      if: ${{ failure() }}
      run: |
        TASK_DEFINITION=$(aws ecs register-task-definition \
          --family ${{ env.TASK_FAMILY }} \
          --container-definitions '[{
            "name": "app",
            "image": "03021914/blue-green:${{ env.BLUE_IMAGE_TAG }}",
            "memory": 256,
            "cpu": 256,
            "essential": true,
            "portMappings": [{"containerPort": 5000, "hostPort": 5000}]
          }]' \
          --execution-role-arn arn:aws:iam::YOUR_ACCOUNT_ID:role/demo-ecs-exec-role \
          --task-role-arn arn:aws:iam::YOUR_ACCOUNT_ID:role/demo-ecs-task-role)
        aws ecs update-service \
          --cluster ${{ env.CLUSTER_NAME }} \
          --service ${{ env.BLUE_SERVICE_NAME }} \
          --task-definition $(echo $TASK_DEFINITION | jq -r .taskDefinition.taskDefinitionArn) \
          --force-new-deployment

    - name: Wait for Rollback Stability
      if: ${{ failure() }}
      run: |
        aws ecs wait services-stable \
          --cluster ${{ env.CLUSTER_NAME }} \
          --services ${{ env.BLUE_SERVICE_NAME }}

    - name: Redirect Traffic Back to Blue After Rollback
      if: ${{ failure() }}
      run: |
        aws elbv2 modify-listener \
          --listener-arn arn:aws:elasticloadbalancing:${{ env.AWS_REGION }}:YOUR_ACCOUNT_ID:listener/app/${{ env.ALB_NAME }}/80 \
          --default-actions Type=forward,TargetGroupArn=arn:aws:elasticloadbalancing:${{ env.AWS_REGION }}:YOUR_ACCOUNT_ID:targetgroup/blue/ID

    - name: Deregister and Stop Green Service After Rollback
      if: ${{ failure() }}
      run: |
        if aws ecs describe-services --cluster ${{ env.CLUSTER_NAME }} --services ${{ env.GREEN_SERVICE_NAME }} --query 'services[?status!=`INACTIVE`]' --output text | grep -q .; then
          aws ecs update-service \
            --cluster ${{ env.CLUSTER_NAME }} \
            --service ${{ env.GREEN_SERVICE_NAME }} \
            --desired-count 0
          aws ecs delete-service \
            --cluster ${{ env.CLUSTER_NAME }} \
            --service ${{ env.GREEN_SERVICE_NAME }} \
            --force
        fi

name: "Blue/Green Deployment"

on:
  push:
    branches:
      - dev

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::058264525554:role/github-actions-OpsXandao-pipeline
          aws-region: us-east-1

      - name: Switch production listener (port 80) to green target
        run: |
          aws elbv2 modify-listener \
            --listener-arn arn:aws:elasticloadbalancing:us-east-1:058264525554:listener/app/demo-alb/1f083f8eca053c81/8f9fbabc905390d7 \
            --default-actions Type=forward,TargetGroupArn=arn:aws:elasticloadbalancing:us-east-1:058264525554:targetgroup/green-2025011011160310350000000a/8ec53653f5d875be

      - name: Switch test listener (port 5001) to blue target
        run: |
          aws elbv2 modify-listener \
            --listener-arn arn:aws:elasticloadbalancing:us-east-1:058264525554:listener/app/demo-alb/1f083f8eca053c81/92f531ed67125bc4 \
            --default-actions Type=forward,TargetGroupArn=arn:aws:elasticloadbalancing:us-east-1:058264525554:targetgroup/main-20250110111603103300000008/a4486f2e8b9cfe09
            
      - name: Update blue environment with new image
        run: |
          # Get the current task definition
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition show-colors --query 'taskDefinition' --output json)
          
          # Create new task definition with updated image
          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq '.containerDefinitions[0].image = "03021914/blue-green:v2"')
          
          # Register new task definition
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --family show-colors \
            --task-role-arn $(echo $TASK_DEFINITION | jq -r '.taskRoleArn') \
            --execution-role-arn $(echo $TASK_DEFINITION | jq -r '.executionRoleArn') \
            --network-mode bridge \
            --container-definitions "$(echo $NEW_TASK_DEFINITION | jq '.containerDefinitions')" \
            --cpu "$(echo $TASK_DEFINITION | jq -r '.cpu')" \
            --memory "$(echo $TASK_DEFINITION | jq -r '.memory')" \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          
          # Update the blue service with new task definition
          aws ecs update-service \
            --cluster prd-demo \
            --service color-bg-prd \
            --task-definition $NEW_TASK_DEF_ARN \
            --force-new-deployment

      - name: Wait for service stability
        run: |
          aws ecs wait services-stable \
            --cluster prd-demo \
            --services color-bg-prd

      - name: Switch listeners back to original configuration (on success)
        if: success()
        run: |
          # Switch production listener (port 80) back to blue target
          aws elbv2 modify-listener \
            --listener-arn arn:aws:elasticloadbalancing:us-east-1:058264525554:listener/app/demo-alb/1f083f8eca053c81/8f9fbabc905390d7 \
            --default-actions Type=forward,TargetGroupArn=arn:aws:elasticloadbalancing:us-east-1:058264525554:targetgroup/main-20250110111603103300000008/a4486f2e8b9cfe09

          # Switch test listener (port 5001) back to green target
          aws elbv2 modify-listener \
            --listener-arn arn:aws:elasticloadbalancing:us-east-1:058264525554:listener/app/demo-alb/1f083f8eca053c81/92f531ed67125bc4 \
            --default-actions Type=forward,TargetGroupArn=arn:aws:elasticloadbalancing:us-east-1:058264525554:targetgroup/green-2025011011160310350000000a/8ec53653f5d875be
name: "Blue-Green Deployment"

on:
  push:
    branches:
      - dev

permissions:
  id-token: write
  contents: read

env:
  CLUSTER_NAME: dev-demo
  TASK_FAMILY_NAME: demo-teste
  SERVICE_NAME: app
  TASK_DEFINITION_FILE: terraform/ecs/task_definition.tpl.json
  BLUE_LISTENER_PORT: 80
  GREEN_LISTENER_PORT: 5001
  TIMEOUT_MINUTES: 10

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::058264525554:role/github-actions-OpsXandao-pipeline
          aws-region: us-east-1

      - name: Set up environment
        run: |
          # Retrieve ALB information
          ALB_ARN=$(aws elbv2 describe-load-balancers --names demo-alb --query 'LoadBalancers[0].LoadBalancerArn' --output text)
          PROD_LISTENER_ARN=$(aws elbv2 describe-listeners --load-balancer-arn $ALB_ARN --query "Listeners[?Port==\`80\`].ListenerArn" --output text)
          TEST_LISTENER_ARN=$(aws elbv2 describe-listeners --load-balancer-arn $ALB_ARN --query "Listeners[?Port==\`5001\`].ListenerArn" --output text)
          echo "ALB_ARN=${ALB_ARN}" >> $GITHUB_ENV
          echo "PROD_LISTENER_ARN=${PROD_LISTENER_ARN}" >> $GITHUB_ENV
          echo "TEST_LISTENER_ARN=${TEST_LISTENER_ARN}" >> $GITHUB_ENV

      - name: Get current production target group
        id: prod-tg
        run: |
          CURRENT_PROD_TG=$(aws elbv2 describe-listeners --listener-arn ${{ env.PROD_LISTENER_ARN }} --query 'Listeners[0].DefaultActions[0].TargetGroupArn' --output text)
          echo "CURRENT_PROD_TG=${CURRENT_PROD_TG}" >> $GITHUB_ENV

      - name: Get current task definition
        id: task-def
        run: |
          TASK_DEF_JSON=$(aws ecs describe-task-definition --task-definition ${{ env.TASK_FAMILY_NAME }} --query 'taskDefinition' --output json)
          echo "$TASK_DEF_JSON" > current-task-def.json
          echo "CURRENT_IMAGE=$(jq -r '.containerDefinitions[0].image' current-task-def.json)" >> $GITHUB_ENV

      - name: Register new task definition
        id: register-task
        run: |
          NEW_TASK_DEF=$(aws ecs register-task-definition \
            --cli-input-json file://${{ env.TASK_DEFINITION_FILE }} \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          echo "NEW_TASK_DEF=${NEW_TASK_DEF}" >> $GITHUB_ENV

      - name: Deploy new service with Green Target Group
        id: deploy-green
        run: |
          # Update service with the new task definition
          aws ecs update-service \
            --cluster ${{ env.CLUSTER_NAME }} \
            --service ${{ env.SERVICE_NAME }} \
            --task-definition ${{ env.NEW_TASK_DEF }} \
            --force-new-deployment

          # Switch test listener to point to the green target group
          aws elbv2 modify-listener \
            --listener-arn ${{ env.TEST_LISTENER_ARN }} \
            --default-actions Type=forward,TargetGroupArn=${{ env.CURRENT_PROD_TG }}

      - name: Run health checks on Green Target Group
        id: health-check
        run: |
          ALB_DNS=$(aws elbv2 describe-load-balancers \
            --names demo-alb --query 'LoadBalancers[0].DNSName' --output text)
          MAX_RETRIES=10

          for ((i=1; i<=MAX_RETRIES; i++)); do
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "http://$ALB_DNS:${{ env.GREEN_LISTENER_PORT }}")
            if [ "$HTTP_STATUS" -eq 200 ]; then
              echo "Health check passed!"
              break
            fi
            if [ "$i" -eq $MAX_RETRIES ]; then
              echo "Health check failed after $MAX_RETRIES attempts"
              exit 1
            fi
            sleep 10
          done

      - name: Switch production traffic to Green Target Group
        id: switch-prod
        run: |
          aws elbv2 modify-listener \
            --listener-arn ${{ env.PROD_LISTENER_ARN }} \
            --default-actions Type=forward,TargetGroupArn=${{ env.CURRENT_PROD_TG }}

      - name: Rollback on failure
        if: failure()
        run: |
          PREV_TASK_DEF=$(jq -r '.taskDefinitionArn' current-task-def.json)
          aws ecs update-service \
            --cluster ${{ env.CLUSTER_NAME }} \
            --service ${{ env.SERVICE_NAME }} \
            --task-definition $PREV_TASK_DEF \
            --force-new-deployment

name: "Blue/Green Deployment"
on:
  push:
    branches:
      - example

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::<AWS_ACCOUNT_ID>:role/<ROLE_NAME>
          aws-region: <AWS_REGION>

      # 1° Direcionamos o tráfego de produção para green
      - name: Switch production traffic to green target
        run: |
          aws elbv2 modify-listener \
            --listener-arn arn:aws:elasticloadbalancing:<AWS_REGION>:<AWS_ACCOUNT_ID>:listener/app/<ALB_NAME>/<LISTENER_ID_PROD> \
            --default-actions Type=forward,TargetGroupArn=arn:aws:elasticloadbalancing:<AWS_REGION>:<AWS_ACCOUNT_ID>:targetgroup/<TARGET_GROUP_GREEN>/<TARGET_GROUP_ID_GREEN>

      # 2° Direcionamos o tráfego de teste para blue
      - name: Switch test traffic to blue target
        run: |
          aws elbv2 modify-listener \
            --listener-arn arn:aws:elasticloadbalancing:<AWS_REGION>:<AWS_ACCOUNT_ID>:listener/app/<ALB_NAME>/<LISTENER_ID_TEST> \
            --default-actions Type=forward,TargetGroupArn=arn:aws:elasticloadbalancing:<AWS_REGION>:<AWS_ACCOUNT_ID>:targetgroup/<TARGET_GROUP_BLUE>/<TARGET_GROUP_ID_BLUE>

      # Atualizamos o ambiente blue com a nova imagem
      - name: Update blue environment with new image
        run: |
          # Get the current task definition
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition <TASK_FAMILY> --query 'taskDefinition' --output json)
          
          # Create new task definition with updated image
          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq '.containerDefinitions[0].image = "<NEW_IMAGE>"')
          
          # Register new task definition
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --family <TASK_FAMILY> \
            --task-role-arn $(echo $TASK_DEFINITION | jq -r '.taskRoleArn') \
            --execution-role-arn $(echo $TASK_DEFINITION | jq -r '.executionRoleArn') \
            --network-mode bridge \
            --container-definitions "$(echo $NEW_TASK_DEFINITION | jq '.containerDefinitions')" \
            --cpu "$(echo $TASK_DEFINITION | jq -r '.cpu')" \
            --memory "$(echo $TASK_DEFINITION | jq -r '.memory')" \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          
          # Update the blue service with new task definition
          aws ecs update-service \
            --cluster <CLUSTER_NAME> \
            --service <SERVICE_NAME> \
            --task-definition $NEW_TASK_DEF_ARN \
            --force-new-deployment

      - name: Wait for service stability
        run: |
          aws ecs wait services-stable \
            --cluster <CLUSTER_NAME> \
            --services <SERVICE_NAME>

      # Após o deploy bem-sucedido, configuramos os listeners finais
      - name: Configure final traffic routing (on success)
        if: success()
        run: |
          # Porta 80 (produção) aponta para blue (nova imagem)
          aws elbv2 modify-listener \
            --listener-arn arn:aws:elasticloadbalancing:<AWS_REGION>:<AWS_ACCOUNT_ID>:listener/app/<ALB_NAME>/<LISTENER_ID_PROD> \
            --default-actions Type=forward,TargetGroupArn=arn:aws:elasticloadbalancing:<AWS_REGION>:<AWS_ACCOUNT_ID>:targetgroup/<TARGET_GROUP_BLUE>/<TARGET_GROUP_ID_BLUE>

          # Porta 5001 (teste) aponta para green (imagem antiga)
          aws elbv2 modify-listener \
            --listener-arn arn:aws:elasticloadbalancing:<AWS_REGION>:<AWS_ACCOUNT_ID>:listener/app/<ALB_NAME>/<LISTENER_ID_TEST> \
            --default-actions Type=forward,TargetGroupArn=arn:aws:elasticloadbalancing:<AWS_REGION>:<AWS_ACCOUNT_ID>:targetgroup/<TARGET_GROUP_GREEN>/<TARGET_GROUP_ID_GREEN>
